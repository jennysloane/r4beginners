[
  {
    "path": "lessons/2022-11-08-lesson1-syntax/",
    "title": "1. Basic Syntax",
    "description": "In this lesson we will review the basic syntax of R, including defining several common operators.",
    "author": [],
    "date": "2022-11-08",
    "categories": [],
    "contents": "\r\nIn this lesson we will review some of the basic syntax of R,\r\nincluding the following common operators:\r\n<- assignment operator\r\n> greater than operator\r\n< less than operator\r\n== equality operator\r\n!= inequality operator\r\n& and operator\r\n| or operator\r\nSyntax\r\nSyntax in computer programming is a set of rules that defines the\r\nstructure of a language, similar to how we have rules for grammar and\r\nspelling. If you write a sentence with incorrect spelling or grammar,\r\nthe sentence may not make sense. If you write code without proper\r\nsyntax, the code won’t be able to run and you’ll get an error\r\nmessage.\r\nExample\r\nIn this example, we are trying to print the following famous\r\ncoding statement: “hello world”\r\nIn this first R chunk, we can see how to successfully print\r\n“hello world”\r\nTo run the line of code below (aka R chunk) you can either\r\npush the green arrow pointing to the right or click on the line of code\r\nand push ctrl+enter (windows) or cmd+enter (mac)\r\n\r\n\r\nprint(\"hello world\")\r\n\r\n\r\n[1] \"hello world\"\r\n\r\nIn this second R chunk, we can see what happens if we have even the\r\nslightest mistake in our code. R recognizes “print”, but not “Print”\r\nwith a capital P. This is an important lesson because it demonstrates\r\nthat R (and many programming languages) are sensitive to capitalization.\r\nTherefore, if you run a line of code and get an error, it’s always a\r\ngood idea to double check that you’ve spelled everything correctly.\r\n\r\n\r\nPrint(\"hello world\")\r\n\r\n\r\n\r\nOperators\r\nAssignment Operator\r\nIn R, one of the most common operators is the “assignment operator”\r\nwhich looks like this arrow <-\r\nIn most situations, it would also be acceptable to use the = sign,\r\nbut in R, the arrow is the typical notation\r\nIn this next example, we are assigning x to be 10, y to be 25, and z\r\nto be 100\r\nx, y, and z are stored as values (or variables) in our\r\nEnvironment\r\nBefore you run the R chunk below, click on the Environment\r\npane (usually located in the top right corner of RStudio). Watch what\r\nhappens when you run the code below\r\n\r\n\r\nx <- 10\r\nx\r\n\r\n\r\n[1] 10\r\n\r\ny <- 25\r\ny\r\n\r\n\r\n[1] 25\r\n\r\nz <- 100\r\nz\r\n\r\n\r\n[1] 100\r\n\r\nAs you can see, when you use the assignment operator, it saves the\r\nvalues (x, y, z) in your environment. This means that R will remember\r\nthese values\r\nTo test this out, type “z” into your console and press enter and see\r\nwhat happens! Spoiler: it should return the value 100\r\nGreater or Less than\r\nOperators\r\n> greater than operator\r\n< less than operator\r\nIn this example, we will ask if x is greater than y?\r\nRemember, we have x assigned to 10 and y assigned to 25. So, is 10\r\ngreater than 25? True or False?\r\n\r\n\r\nx > y\r\n\r\n\r\n[1] FALSE\r\n\r\nIs x less than y?\r\n\r\n\r\nx < y \r\n\r\n\r\n[1] TRUE\r\n\r\nEquality Operators\r\n== is the equal-to operator\r\nWe can think of the example below as “is x equal to y?”\r\nNotice, in this scenario R will return TRUE or FALSE and the values\r\nof x and y do not change\r\nBe careful not to confuse == and =\r\n\r\n\r\nx == y \r\n\r\n\r\n[1] FALSE\r\n\r\nx # x is still 10\r\n\r\n\r\n[1] 10\r\n\r\nIf we instead had x = y, R doesn’t return anything, but the value of\r\nx has updated in the environment\r\n\r\n\r\nx = y\r\nx # x is now 25\r\n\r\n\r\n[1] 25\r\n\r\nHere, we’ll just re-assign x to 10\r\n\r\n\r\nx <- 10\r\n\r\n\r\n\r\n!= is the not-equal-to operator (opposite of ==)\r\nWe can think of the example below as: “Is x not equal to y,\r\nTrue or False?”\r\n\r\n\r\nx != y \r\n\r\n\r\n[1] TRUE\r\n\r\nThe And Operator\r\n& is the “and” operator\r\nWe can think of this example in two parts: Is z greater than 50 AND\r\nis z less than 200?\r\nRemember, z is 100. So, is it true that 100 > 50 AND 100 <\r\n200?\r\nIn order for this statement to be true, both pieces must be\r\ntrue\r\n\r\n\r\nz > 50 & z < 200 \r\n\r\n\r\n[1] TRUE\r\n\r\nWhat about if we asked the following: is z > 50 AND is z >\r\n200?\r\n\r\n\r\nz > 50 & z > 200\r\n\r\n\r\n[1] FALSE\r\n\r\nThe Or Operator\r\n| is the “or” operator\r\nWe can again think of this example in two parts: is z greater than\r\n50 OR is z greater than 200?\r\nHowever, this time, in order for the statement (aka expression) to\r\nbe true, only one of the parts needs to be true\r\nSo, let’s test the same line of code we had in the last example but\r\nwith an | operator instead of an & operator\r\n\r\n\r\nz > 50 | z > 200\r\n\r\n\r\n[1] TRUE\r\n\r\nTHE END\r\n\r\n\r\n\r\n",
    "preview": {},
    "last_modified": "2022-11-08T20:50:22-06:00",
    "input_file": {}
  },
  {
    "path": "lessons/2022-11-08-lesson2-variable-types/",
    "title": "2. Variable Types",
    "description": "In this lesson we will introduce different types of variables.",
    "author": [],
    "date": "2022-11-08",
    "categories": [],
    "contents": "\r\nIn this lesson we will introduce different types of variables,\r\nincluding character, numeric, integer, logical.\r\nTypes of Variables\r\nCharacter\r\nA character is a type of class that contains a string of\r\ncharacters. For example, a name is a string of characters (or\r\nletters).\r\nIn the example below, I’ve saved my name “Jenny” to a variable\r\nI’ve called “my_char”.\r\n\r\n\r\nmy_char <- \"Jenny\"\r\n\r\n\r\n\r\nTo check what type of variable you have, you can use the\r\nclass() function\r\nAll we have to do is insert our variable (my_char) within the\r\nparentheses of our function\r\nNote, we will review functions in a following lesson, but for now\r\njust run the below line of code and see what gets returned\r\n\r\n\r\nclass(my_char)\r\n\r\n\r\n[1] \"character\"\r\n\r\nAs you can see, R returned the word “character” as we may have\r\nexpected\r\nWe can also use the is.character() function to check\r\nif our variable is a character. This function will return either TRUE or\r\nFALSE\r\n\r\n\r\nis.character(my_char)\r\n\r\n\r\n[1] TRUE\r\n\r\nNumeric\r\nNumeric is a type of class that contains whole numbers\r\nor numbers with decimals\r\nLet’s test out a couple of examples\r\nWe will first assign a number to a new variable (my_num1 or\r\nmy_num2)\r\nAnd then we’ll ask R to print (or return) the value for us\r\n\r\n\r\nmy_num1 <- 22 # my favorite number!\r\nmy_num1 \r\n\r\n\r\n[1] 22\r\n\r\nmy_num2 <- 22.22\r\nmy_num2\r\n\r\n\r\n[1] 22.22\r\n\r\nLet’s check the classes of the variables we’ve just created\r\n\r\n\r\nclass(my_num1)\r\n\r\n\r\n[1] \"numeric\"\r\n\r\nclass(my_num2)\r\n\r\n\r\n[1] \"numeric\"\r\n\r\nWe can see that both of our variables are numeric\r\nInteger\r\nAn integer is a type of class that contains only\r\nwhole numbers\r\nOf course, this is similar to the numeric class, but without\r\ndecimals. So how does R know if a whole number is numeric or an\r\ninteger?\r\nBy default, R will assign any whole number to the numeric class. We\r\nobserved this above when we saw the class of the number 22 was\r\nnumeric\r\nHowever, as we’ll see below, you can convert a numeric class to an\r\ninteger using the as.integer() function\r\n\r\n\r\nmy_int1 <- as.integer(22)\r\nclass(my_int1)\r\n\r\n\r\n[1] \"integer\"\r\n\r\nBut, what happens if we try to convert a number with a decimal to an\r\ninteger?\r\n\r\n\r\nmy_int2 <- as.integer(22.22)\r\nclass(my_int2)\r\n\r\n\r\n[1] \"integer\"\r\n\r\nThis works! It has successfully converted 22.22 to an integer\r\nHowever, it is important to note that 22.22 was forced to become a\r\nwhole number\r\nSo, if we look at my_int2, it is now the whole number 22 rather than\r\nthe decimal 22.22\r\n\r\n\r\nmy_int2\r\n\r\n\r\n[1] 22\r\n\r\nLogical\r\nLogical is a special type of class that contains only two\r\npossible values: TRUE or FALSE\r\nPlease note that the logical values must be written in all caps with\r\nno quotes\r\n\r\n\r\nlog1 <- TRUE\r\nlog2 <- FALSE\r\n\r\n\r\n\r\nOnce again, we’ll check the classes of the variables we’ve just\r\ncreated\r\n\r\n\r\nclass(log1)\r\n\r\n\r\n[1] \"logical\"\r\n\r\nclass(log2)\r\n\r\n\r\n[1] \"logical\"\r\n\r\nWhat happens if we try the following?\r\n\r\n\r\nlog3 <- \"TRUE\"\r\nclass(log3)\r\n\r\n\r\n[1] \"character\"\r\n\r\nBecause TRUE is in “” here, by default R assigns this to the\r\ncharacter class\r\n\r\n\r\nlog4 <- true\r\n\r\n\r\n\r\nThis example doesn’t even run! R gives us an error here saying\r\n“object ‘true’ not found”\r\nSummary\r\nCharacter: list of character strings\r\nNumeric: whole numbers OR numbers with decimals\r\nInteger: Only whole numbers\r\nLogical: TRUE or FALSE\r\nTHE END\r\n\r\n\r\n\r\n",
    "preview": {},
    "last_modified": "2022-11-08T20:28:35-06:00",
    "input_file": {}
  }
]
