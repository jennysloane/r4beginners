[
  {
    "path": "lessons/2022-10-08-lesson-syntax/",
    "title": "1. Basic Syntax",
    "description": "In this lesson we will review the basic syntax of R, including defining several common operators.",
    "author": [],
    "date": "2022-11-07",
    "categories": [],
    "contents": "\r\nIn this lesson we will review some of the basic syntax of R,\r\nincluding several common operators, including the following:\r\nassignment operator (<-)\r\ngreater than operator (>)\r\nless than operator (<)\r\nequality operator (==)\r\ninequality operator (!=)\r\nand operator (&)\r\nor operator (|)\r\nSyntax\r\nSyntax in computer programming is a set of rules that defines the\r\nstructure of a language, similar to how we have rules for grammar and\r\nspelling. If you write a sentence with incorrect spelling or grammar,\r\nthe sentence may not make sense. If you write code without proper\r\nsyntax, the code won’t be able to run and you’ll get an error\r\nmessage.\r\nExample\r\nIn this example, we are trying to print the following famous coding\r\nstatement: “hello world”.\r\nIn this first R chunk, we can see how to successfully print “hello\r\nworld”.\r\nTo run the line of code below (aka R chunk) you can either\r\npush the green arrow pointing to the right or click on the line of code\r\nand push ctrl+enter (windows) or cmd+enter (mac)\r\n\r\n\r\nprint(\"hello world\")\r\n\r\n\r\n[1] \"hello world\"\r\n\r\nIn this second R chunk, we can see what happens if we have even the\r\nslightest mistake in our code. R recognizes “print”, but not “Print”\r\nwith a capital P. This is an important lesson because it demonstrates\r\nthat R (and many programming languages) are sensitive to capitalization.\r\nTherefore, if you run a line of code and get an error, it’s always a\r\ngood idea to double check that you’ve spelled everything correctly.\r\n\r\n\r\nPrint(\"hello world\")\r\n\r\n\r\n\r\nOperators\r\nAssignment Operator\r\nIn R, one of the most common operators is the “assignment operator”\r\nwhich looks like this arrow <-\r\nIn most situations, it would also be acceptable to use the = sign,\r\nbut in R, the arrow is the typical notation\r\nIn this next example, we are assigning x to be 10, y to be 25, and z\r\nto be 100\r\nx, y, and z are stored as values (or variables) in our\r\nEnvironment\r\nBefore you run the R chunk below, click on the Environment pane\r\n(usually located in the top right corner of RStudio). Watch what happens\r\nwhen you run the code below\r\n\r\n\r\nx <- 10\r\nx\r\n\r\n\r\n[1] 10\r\n\r\ny <- 25\r\ny\r\n\r\n\r\n[1] 25\r\n\r\nz <- 100\r\nz\r\n\r\n\r\n[1] 100\r\n\r\nAs you can see, when you use the assignment operator, it saves the\r\nvalues (x, y, z) in your environment. This means that R will remember\r\nthese values\r\nTo test this out, type “z” into your console and press enter and see\r\nwhat happens! Spoiler: it should return the value 100\r\nGreater or Less than\r\nOperators\r\n\r\ngreater than operator\r\n\r\n< less than operator\r\nIs x greater than y? Remember, we have x assigned to 10 and y\r\nassigned to 25. So is 10 greater than 25? True or False?\r\n\r\n\r\nx > y\r\n\r\n\r\n\r\n[1] FALSE\r\n\r\nIs x less than y?\r\n\r\n\r\nx < y \r\n\r\n\r\n\r\n[1] TRUE\r\n\r\nEquality Operators\r\n== is the equal-to operator\r\nWe can think of the example below as “is x equal to y?”\r\nNotice, in this scenario R will return TRUE or FALSE and the values\r\nof x and y do not change\r\nBe careful not to confuse == and =\r\n\r\n\r\nx == y \r\n\r\n\r\n[1] FALSE\r\n\r\nx # x is still 10\r\n\r\n\r\n[1] 10\r\n\r\nIf we instead had x = y, R doesn’t return anything, but the value of\r\nx has updated in the environment\r\n\r\n\r\nx = y\r\nx # x is now 25\r\n\r\n\r\n\r\n[1] 25\r\n\r\nHere, we’ll just re-assign x to 10\r\n\r\n\r\nx <- 10\r\n\r\n\r\n\r\n\r\n!= is the not-equal-to operator (opposite of ==)\r\nWe can think of the example below as: “Is x not equal to y,\r\nTrue or False?”\r\n\r\n\r\nx != y \r\n\r\n\r\n\r\n[1] TRUE\r\n\r\nThe And Operator\r\n& is the “and” operator\r\nWe can think of this example in two parts: Is z greater than 50 AND\r\nis z less than 200?\r\nRemember, z is 100. So, is it true that 100 > 50 AND 100 <\r\n200?\r\nIn order for this statement to be true, both pieces must be true\r\n\r\n\r\nz > 50 & z < 200 \r\n\r\n\r\n\r\n[1] TRUE\r\n\r\nWhat about if we asked the following: is z > 50 AND is z >\r\n200?\r\n\r\n\r\nz > 50 & z > 200\r\n\r\n\r\n\r\n[1] FALSE\r\n\r\nThe Or Operator\r\nis the “or” operator\r\nWe can again think of this example in two parts: is z greater than\r\n50 OR is z greater than 200?\r\nHowever, this time, in order for the statement (aka expression) to\r\nbe true, only one of the parts needs to be true\r\nSo, let’s test the same line of code we had in the last example but\r\nwith an | operator instead of an & operator and see what gets\r\nreturned\r\n\r\n\r\nz > 50 | z > 200\r\n\r\n\r\n\r\n[1] TRUE\r\n\r\nVectors\r\nIn R, a vector is the simplest type of data structure. It is “a\r\nsingle entity consisting of a collection of things”\r\n\r\n\r\nnames <- c(\"Kevin\", \"Jenny\", \"Millie\")\r\n\r\nage <- c(20, 18, 33)\r\n\r\nblue_eyes <- c(TRUE, FALSE, FALSE)\r\n\r\n\r\n\r\nTypes of Variables\r\n\r\n\r\n\r\n\r\n",
    "preview": {},
    "last_modified": "2022-11-07T16:43:23-06:00",
    "input_file": "lesson-syntax.knit.md"
  }
]
