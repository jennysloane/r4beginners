[
  {
    "path": "lessons/2022-10-29-lesson3-data-structure/",
    "title": "3. Data Structure - Part 1",
    "description": "In this lesson we will review different data structures in R, including vectors, matrices, and arrays.",
    "author": [],
    "date": "2022-11-22",
    "categories": [],
    "contents": "\r\nA data structure is a unique way of organizing data so that it can be\r\nstored, processed, and retrieved effectively. In this lesson we will\r\nreview some of the different data structures in R, including the\r\nfollowing:\r\nVectors\r\nMatrices\r\nArrays\r\nIn the next lesson, we will review:\r\nData frames\r\nTibbles\r\nDepending on what you are using R for, you will probably use a\r\nspecific type of data structure most frequently. For example, in my\r\nresearch, I use data frames and tibbles all the time and rarely use\r\nmatrices or arrays. However, it is still useful to be aware of and\r\nunderstand the different types of data structures.\r\nVectors\r\nIn R, a vector is the simplest type of data structure. It is a\r\nsequence of data elements of the same basic type.\r\nIn the example below, we have three people (who happen to be myself\r\nand my two brothers) - Josh, Jenny, and Brandon. Here, we are creating\r\nthree separate vectors:\r\nnames that contains character strings of our\r\nthree names\r\nage that contains numeric values representing\r\nour respective ages (at least at the time of writing this, but I will\r\nhappily remain 30 forever)\r\nblue_eyes that contains logical values\r\nrepresenting whether we have blue eyes or not\r\n\r\n\r\nnames <- c(\"Josh\", \"Jenny\", \"Brandon\")\r\nnames\r\n\r\n\r\n[1] \"Josh\"    \"Jenny\"   \"Brandon\"\r\n\r\nage <- c(31, 30, 27)\r\nage\r\n\r\n\r\n[1] 31 30 27\r\n\r\nblue_eyes <- c(TRUE, FALSE, FALSE)\r\nblue_eyes\r\n\r\n\r\n[1]  TRUE FALSE FALSE\r\n\r\nOnce you run the above R chunk, you can click on the Environment tab\r\nand see how the data is stored. It even shows the data types (num, logi,\r\nchr).\r\nIn this example, it’s important to notice that each vector only\r\ncontains one type of data. We can also see the type of data stored with\r\nthe class() function.\r\nThe lines of code below are not being assigned (or saved) to any\r\nvariables, so the results will be returned in the console, but not saved\r\nto the Environment.\r\n\r\n\r\nclass(names)\r\n\r\n\r\n[1] \"character\"\r\n\r\nclass(age)\r\n\r\n\r\n[1] \"numeric\"\r\n\r\nclass(blue_eyes)\r\n\r\n\r\n[1] \"logical\"\r\n\r\nMatrices\r\nA matrix has 2 dimensions of data and contains only one type of data.\r\nMatrices look like a typical table. In my experience, matrices typically\r\ncontain numeric values, but there can also be character matrices.\r\nR has a built-in matrix() function\r\nIn the example below, we will create a matrix of the numbers 1\r\nthrough 25 and fill it into a 5x5 matrix (5 rows and 5 columns)\r\nWe will save our matrix to a variable called\r\nmy_matrix\r\n\r\n\r\nmy_matrix <- matrix(data = 1:25, nrow = 5, ncol = 5)\r\nmy_matrix\r\n\r\n\r\n     [,1] [,2] [,3] [,4] [,5]\r\n[1,]    1    6   11   16   21\r\n[2,]    2    7   12   17   22\r\n[3,]    3    8   13   18   23\r\n[4,]    4    9   14   19   24\r\n[5,]    5   10   15   20   25\r\n\r\nWe can see that the data perfectly fill in our matrix\r\nBy default, R has filled in our matrix by columns, so we can see\r\nthat 1, 2, 3, 4, 5 are filled in the first column and then it moves on\r\nto the next column\r\nIf you want to fill in your matrix by rows (instead of columns), you\r\ncan set the byrow argument to equal TRUE like in\r\nthe example below\r\nPlease note, we will review functions and arguments in more\r\ndetail in a couple of lessons\r\n\r\n\r\nmatrix(data = 1:25, nrow = 5, ncol = 5, byrow = TRUE)\r\n\r\n\r\n     [,1] [,2] [,3] [,4] [,5]\r\n[1,]    1    2    3    4    5\r\n[2,]    6    7    8    9   10\r\n[3,]   11   12   13   14   15\r\n[4,]   16   17   18   19   20\r\n[5,]   21   22   23   24   25\r\n\r\nHere’s an example of a matrix with character strings, specifically\r\nthe colors of the rainbow.\r\nNote, that the character strings are in quotes and wrapped around a\r\nc() function, which simply combines the elements.\r\n\r\n\r\nrainbow_matrix <- matrix(data = c(\"red\", \"orange\", \"yellow\", \"green\", \"blue\", \"purple\"), nrow = 2, ncol = 3)\r\nrainbow_matrix\r\n\r\n\r\n     [,1]     [,2]     [,3]    \r\n[1,] \"red\"    \"yellow\" \"blue\"  \r\n[2,] \"orange\" \"green\"  \"purple\"\r\n\r\nYou can access an item within your matrix by using []\r\nwhere the first number represents which column and the second represents\r\nwhich row.\r\n\r\n\r\nmy_matrix[2,4]\r\n\r\n\r\n[1] 17\r\n\r\nrainbow_matrix[1,3]\r\n\r\n\r\n[1] \"blue\"\r\n\r\nNext, we’ll test out what happens if we try to create a matrix that\r\nis smaller than our data\r\n\r\n\r\nmatrix(data = 1:25, nrow = 4, ncol = 4)\r\n\r\n\r\n     [,1] [,2] [,3] [,4]\r\n[1,]    1    5    9   13\r\n[2,]    2    6   10   14\r\n[3,]    3    7   11   15\r\n[4,]    4    8   12   16\r\n\r\nHere, we can see that R did print our 4x4 matrix, but we are also\r\ngiven a useful warning notifying us that the length of our data (25)\r\ndoes not fit\r\nNext, let’s test out what happens if we try to create a matrix that\r\nis larger than our given data\r\n\r\n\r\nmatrix(data = 1:25, nrow = 6, ncol = 6)\r\n\r\n\r\n     [,1] [,2] [,3] [,4] [,5] [,6]\r\n[1,]    1    7   13   19   25    6\r\n[2,]    2    8   14   20    1    7\r\n[3,]    3    9   15   21    2    8\r\n[4,]    4   10   16   22    3    9\r\n[5,]    5   11   17   23    4   10\r\n[6,]    6   12   18   24    5   11\r\n\r\nAgain, we see that R does return our matrix, but notice what happens\r\nafter it reaches our max value of 25… it starts over! R will recycle the\r\nvalues, so after 25, it will go back to 1.\r\nNote that we also get the same warning as we saw previously because\r\nour data does not fit perfectly\r\nMatrices are often used for data transformation. So as a final\r\nexample of matrices, let’s see how we can easily transform our\r\nmy_matrix matrix to a new matrix that is multiplied by\r\n2\r\nThis is as simple as multiplying our original matrix by 2!\r\n\r\n\r\n# original matrix\r\nmy_matrix\r\n\r\n\r\n     [,1] [,2] [,3] [,4] [,5]\r\n[1,]    1    6   11   16   21\r\n[2,]    2    7   12   17   22\r\n[3,]    3    8   13   18   23\r\n[4,]    4    9   14   19   24\r\n[5,]    5   10   15   20   25\r\n\r\n# matrix multiplied by 2\r\nmy_matrix*2\r\n\r\n\r\n     [,1] [,2] [,3] [,4] [,5]\r\n[1,]    2   12   22   32   42\r\n[2,]    4   14   24   34   44\r\n[3,]    6   16   26   36   46\r\n[4,]    8   18   28   38   48\r\n[5,]   10   20   30   40   50\r\n\r\nArrays\r\nAn array has 1 or more dimensions of data, but only contains a single\r\ndata type.\r\nR has a built-in array() function\r\nBelow, we will create a simple vector of a sequence 1 through 18\r\nand\r\nThen we will call the array function to see what happens\r\nEven though we are calling an array() we can see\r\nthat this type of an array is simply a vector\r\nNow we know that a 1-dimensional array is a vector\r\n\r\n\r\nvector <- 1:25\r\n\r\narray(vector)\r\n\r\n\r\n [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22\r\n[23] 23 24 25\r\n\r\nLet’s delve a bit further!\r\nThe array() function has an argument called “dim”,\r\nwhich is where we can set the dimensions\r\nHere are a few examples of multi-dimensional arrays:\r\n\r\n\r\narray(vector, dim = c(5,5))\r\n\r\n\r\n     [,1] [,2] [,3] [,4] [,5]\r\n[1,]    1    6   11   16   21\r\n[2,]    2    7   12   17   22\r\n[3,]    3    8   13   18   23\r\n[4,]    4    9   14   19   24\r\n[5,]    5   10   15   20   25\r\n\r\nThis should look very familiar!\r\nThis example is meant to demonstrate that 2 dimensional arrays are\r\nmatrices\r\nHowever, arrays can also contain more than 2 dimensions…let’s see\r\nwhat happens if we add another dimension.\r\n\r\n\r\narray(vector, dim = c(5,5,2))\r\n\r\n\r\n, , 1\r\n\r\n     [,1] [,2] [,3] [,4] [,5]\r\n[1,]    1    6   11   16   21\r\n[2,]    2    7   12   17   22\r\n[3,]    3    8   13   18   23\r\n[4,]    4    9   14   19   24\r\n[5,]    5   10   15   20   25\r\n\r\n, , 2\r\n\r\n     [,1] [,2] [,3] [,4] [,5]\r\n[1,]    1    6   11   16   21\r\n[2,]    2    7   12   17   22\r\n[3,]    3    8   13   18   23\r\n[4,]    4    9   14   19   24\r\n[5,]    5   10   15   20   25\r\n\r\nThe first number in our dim argument tells us how many rows will be\r\nin our array\r\nThe second number specifies the number of columns\r\nThe third number specifies the number of dimensions\r\nHere’s one final example, but I encourage you to play around with the\r\narray() and test out different numbers and dimensions\r\n\r\n\r\narray(vector, dim = c(2,3,4))\r\n\r\n\r\n, , 1\r\n\r\n     [,1] [,2] [,3]\r\n[1,]    1    3    5\r\n[2,]    2    4    6\r\n\r\n, , 2\r\n\r\n     [,1] [,2] [,3]\r\n[1,]    7    9   11\r\n[2,]    8   10   12\r\n\r\n, , 3\r\n\r\n     [,1] [,2] [,3]\r\n[1,]   13   15   17\r\n[2,]   14   16   18\r\n\r\n, , 4\r\n\r\n     [,1] [,2] [,3]\r\n[1,]   19   21   23\r\n[2,]   20   22   24\r\n\r\nFor more examples check out \r\nTHE END\r\n\r\n\r\n\r\n",
    "preview": {},
    "last_modified": "2022-11-22T12:50:57-06:00",
    "input_file": {}
  },
  {
    "path": "lessons/2022-10-30-lesson2-variable-types/",
    "title": "2. Variable Types",
    "description": "In this lesson we will introduce different types of variables.",
    "author": [],
    "date": "2022-11-22",
    "categories": [],
    "contents": "\r\nIn this lesson we will introduce different types of variables,\r\nincluding character, numeric, integer, logical.\r\nTypes of Variables\r\nCharacter\r\nA character is a type of class that contains a string of\r\ncharacters. For example, a name is a string of characters (or\r\nletters).\r\nIn the example below, I’ve saved my name “Jenny” to a variable\r\nI’ve called “my_char”.\r\n\r\n\r\nmy_char <- \"Jenny\"\r\n\r\n\r\n\r\nTo check what type of variable you have, you can use the\r\nclass() function\r\nAll we have to do is insert our variable (my_char) within the\r\nparentheses of our function\r\nNote, we will review functions in a following lesson, but for now\r\njust run the below line of code and see what gets returned\r\n\r\n\r\nclass(my_char)\r\n\r\n\r\n[1] \"character\"\r\n\r\nAs you can see, R returned the word “character” as we may have\r\nexpected\r\nWe can also use the is.character() function to check\r\nif our variable is a character. This function will return either TRUE or\r\nFALSE\r\n\r\n\r\nis.character(my_char)\r\n\r\n\r\n[1] TRUE\r\n\r\nNumeric\r\nNumeric is a type of class that contains whole numbers\r\nor numbers with decimals\r\nLet’s test out a couple of examples\r\nWe will first assign a number to a new variable (my_num1 or\r\nmy_num2)\r\nAnd then we’ll ask R to print (or return) the value for us\r\n\r\n\r\nmy_num1 <- 22 # my favorite number!\r\nmy_num1 \r\n\r\n\r\n[1] 22\r\n\r\nmy_num2 <- 22.22\r\nmy_num2\r\n\r\n\r\n[1] 22.22\r\n\r\nLet’s check the classes of the variables we’ve just created\r\n\r\n\r\nclass(my_num1)\r\n\r\n\r\n[1] \"numeric\"\r\n\r\nclass(my_num2)\r\n\r\n\r\n[1] \"numeric\"\r\n\r\nWe can see that both of our variables are numeric\r\nInteger\r\nAn integer is a type of class that contains only\r\nwhole numbers\r\nOf course, this is similar to the numeric class, but without\r\ndecimals. So how does R know if a whole number is numeric or an\r\ninteger?\r\nBy default, R will assign any whole number to the numeric class. We\r\nobserved this above when we saw the class of the number 22 was\r\nnumeric\r\nHowever, as we’ll see below, you can convert a numeric class to an\r\ninteger using the as.integer() function\r\n\r\n\r\nmy_int1 <- as.integer(22)\r\nclass(my_int1)\r\n\r\n\r\n[1] \"integer\"\r\n\r\nBut, what happens if we try to convert a number with a decimal to an\r\ninteger?\r\n\r\n\r\nmy_int2 <- as.integer(22.22)\r\nclass(my_int2)\r\n\r\n\r\n[1] \"integer\"\r\n\r\nThis works! It has successfully converted 22.22 to an integer\r\nHowever, it is important to note that 22.22 was forced to become a\r\nwhole number\r\nSo, if we look at my_int2, it is now the whole number 22 rather than\r\nthe decimal 22.22\r\n\r\n\r\nmy_int2\r\n\r\n\r\n[1] 22\r\n\r\nLogical\r\nLogical is a special type of class that contains only two\r\npossible values: TRUE or FALSE\r\nPlease note that the logical values must be written in all caps with\r\nno quotes\r\n\r\n\r\nlog1 <- TRUE\r\nlog2 <- FALSE\r\n\r\n\r\n\r\nOnce again, we’ll check the classes of the variables we’ve just\r\ncreated\r\n\r\n\r\nclass(log1)\r\n\r\n\r\n[1] \"logical\"\r\n\r\nclass(log2)\r\n\r\n\r\n[1] \"logical\"\r\n\r\nWhat happens if we try the following?\r\n\r\n\r\nlog3 <- \"TRUE\"\r\nclass(log3)\r\n\r\n\r\n[1] \"character\"\r\n\r\nBecause TRUE is in “” here, by default R assigns this to the\r\ncharacter class\r\n\r\n\r\nlog4 <- true\r\n\r\n\r\n\r\nThis example doesn’t even run! R gives us an error here saying\r\n“object ‘true’ not found”\r\nSummary\r\nCharacter: list of character strings\r\nNumeric: whole numbers OR numbers with decimals\r\nInteger: Only whole numbers\r\nLogical: TRUE or FALSE\r\nTHE END\r\n\r\n\r\n\r\n",
    "preview": {},
    "last_modified": "2022-11-22T12:42:49-06:00",
    "input_file": {}
  },
  {
    "path": "lessons/2022-10-31-lesson1-syntax/",
    "title": "1. Basic Syntax",
    "description": "In this lesson we will review the basic syntax of R, including defining several common operators.",
    "author": [],
    "date": "2022-11-22",
    "categories": [],
    "contents": "\r\nIn this lesson we will review some of the basic syntax of R,\r\nincluding the following common operators:\r\n<- assignment operator\r\n> greater than operator\r\n< less than operator\r\n== equality operator\r\n!= inequality operator\r\n& and operator\r\n| or operator\r\nSyntax\r\nSyntax in computer programming is a set of rules that defines the\r\nstructure of a language, similar to how we have rules for grammar and\r\nspelling. If you write a sentence with incorrect spelling or grammar,\r\nthe sentence may not make sense. If you write code without proper\r\nsyntax, the code won’t be able to run and you’ll get an error\r\nmessage.\r\nExample\r\nIn this example, we are trying to print the following famous\r\ncoding statement: “hello world”\r\nIn this first R chunk, we can see how to successfully print\r\n“hello world”\r\nTo run the line of code below (aka R chunk) you can either\r\npush the green arrow pointing to the right or click on the line of code\r\nand push ctrl+enter (windows) or cmd+enter (mac)\r\n\r\n\r\nprint(\"hello world\")\r\n\r\n\r\n[1] \"hello world\"\r\n\r\nIn this second R chunk, we can see what happens if we have even the\r\nslightest mistake in our code. R recognizes “print”, but not “Print”\r\nwith a capital P. This is an important lesson because it demonstrates\r\nthat R (and many programming languages) are sensitive to capitalization.\r\nTherefore, if you run a line of code and get an error, it’s always a\r\ngood idea to double check that you’ve spelled everything correctly.\r\n\r\n\r\nPrint(\"hello world\")\r\n\r\n\r\n\r\nOperators\r\nAssignment Operator\r\nIn R, one of the most common operators is the “assignment operator”\r\nwhich looks like this arrow <-\r\nIn most situations, it would also be acceptable to use the = sign,\r\nbut in R, the arrow is the typical notation\r\nIn this next example, we are assigning x to be 10, y to be 25, and z\r\nto be 100\r\nx, y, and z are stored as values (or variables) in our\r\nEnvironment\r\nBefore you run the R chunk below, click on the Environment\r\npane (usually located in the top right corner of RStudio). Watch what\r\nhappens when you run the code below\r\n\r\n\r\nx <- 10\r\nx\r\n\r\n\r\n[1] 10\r\n\r\ny <- 25\r\ny\r\n\r\n\r\n[1] 25\r\n\r\nz <- 100\r\nz\r\n\r\n\r\n[1] 100\r\n\r\nAs you can see, when you use the assignment operator, it saves the\r\nvalues (x, y, z) in your environment. This means that R will remember\r\nthese values\r\nTo test this out, type “z” into your console and press enter and see\r\nwhat happens! Spoiler: it should return the value 100\r\nGreater or Less than\r\nOperators\r\n> greater than operator\r\n< less than operator\r\nIn this example, we will ask if x is greater than y?\r\nRemember, we have x assigned to 10 and y assigned to 25. So, is 10\r\ngreater than 25? True or False?\r\n\r\n\r\nx > y\r\n\r\n\r\n[1] FALSE\r\n\r\nIs x less than y?\r\n\r\n\r\nx < y \r\n\r\n\r\n[1] TRUE\r\n\r\nEquality Operators\r\n== is the equal-to operator\r\nWe can think of the example below as “is x equal to y?”\r\nNotice, in this scenario R will return TRUE or FALSE and the values\r\nof x and y do not change\r\nBe careful not to confuse == and =\r\n\r\n\r\nx == y \r\n\r\n\r\n[1] FALSE\r\n\r\nx # x is still 10\r\n\r\n\r\n[1] 10\r\n\r\nIf we instead had x = y, R doesn’t return anything, but the value of\r\nx has updated in the environment\r\n\r\n\r\nx = y\r\nx # x is now 25\r\n\r\n\r\n[1] 25\r\n\r\nHere, we’ll just re-assign x to 10\r\n\r\n\r\nx <- 10\r\n\r\n\r\n\r\n!= is the not-equal-to operator (opposite of ==)\r\nWe can think of the example below as: “Is x not equal to y,\r\nTrue or False?”\r\n\r\n\r\nx != y \r\n\r\n\r\n[1] TRUE\r\n\r\nThe And Operator\r\n& is the “and” operator\r\nWe can think of this example in two parts: Is z greater than 50 AND\r\nis z less than 200?\r\nRemember, z is 100. So, is it true that 100 > 50 AND 100 <\r\n200?\r\nIn order for this statement to be true, both pieces must be\r\ntrue\r\n\r\n\r\nz > 50 & z < 200 \r\n\r\n\r\n[1] TRUE\r\n\r\nWhat about if we asked the following: is z > 50 AND is z >\r\n200?\r\n\r\n\r\nz > 50 & z > 200\r\n\r\n\r\n[1] FALSE\r\n\r\nThe Or Operator\r\n| is the “or” operator\r\nWe can again think of this example in two parts: is z greater than\r\n50 OR is z greater than 200?\r\nHowever, this time, in order for the statement (aka expression) to\r\nbe true, only one of the parts needs to be true\r\nSo, let’s test the same line of code we had in the last example but\r\nwith an | operator instead of an & operator\r\n\r\n\r\nz > 50 | z > 200\r\n\r\n\r\n[1] TRUE\r\n\r\nTHE END\r\n\r\n\r\n\r\n",
    "preview": {},
    "last_modified": "2022-11-22T12:37:33-06:00",
    "input_file": {}
  }
]
